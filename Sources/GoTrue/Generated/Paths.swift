// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
  internal static var token: Token {
    Token(path: "/token")
  }

  internal struct Token {
    /// Path: `/token`
    internal let path: String

    internal func post(grantType: GrantType, redirectURL: URL? = nil, _ body: PostRequest)
      -> Request<GoTrue.Session>
    {
      .post(path, query: makePostQuery(grantType, redirectURL), body: body)
    }

    private func makePostQuery(_ grantType: GrantType, _ redirectURL: URL?) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(grantType, forKey: "grant_type")
      encoder.encode(redirectURL, forKey: "redirect_url")
      return encoder.items
    }

    internal enum GrantType: String, Codable, CaseIterable {
      case password
      case refreshToken = "refresh_token"
      case idToken = "id_token"
    }

    internal enum PostRequest: Encodable {
      case userCredentials(GoTrue.UserCredentials)
      case openIDConnectCredentials(GoTrue.OpenIDConnectCredentials)

      internal func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .userCredentials(let value): try container.encode(value)
        case .openIDConnectCredentials(let value): try container.encode(value)
        }
      }
    }
  }
}

extension Paths {
  internal static var signup: Signup {
    Signup(path: "/signup")
  }

  internal struct Signup {
    /// Path: `/signup`
    internal let path: String

    internal func post(redirectURL: URL? = nil, _ body: GoTrue.SignUpRequest) -> Request<
      GoTrue.SessionOrUser
    > {
      .post(path, query: makePostQuery(redirectURL), body: body)
    }

    private func makePostQuery(_ redirectURL: URL?) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(redirectURL, forKey: "redirect_url")
      return encoder.items
    }
  }
}

extension Paths {
  internal static var otp: Otp {
    Otp(path: "/otp")
  }

  internal struct Otp {
    /// Path: `/otp`
    internal let path: String

    internal func post(redirectURL: URL? = nil, _ body: GoTrue.OTPParams) -> Request<Void> {
      .post(path, query: makePostQuery(redirectURL), body: body)
    }

    private func makePostQuery(_ redirectURL: URL?) -> [(String, String?)] {
      let encoder = URLQueryEncoder()
      encoder.encode(redirectURL, forKey: "redirect_url")
      return encoder.items
    }
  }
}

extension Paths {
  internal static var verify: Verify {
    Verify(path: "/verify")
  }

  internal struct Verify {
    /// Path: `/verify`
    internal let path: String

    internal func post(_ body: GoTrue.VerifyOTPParams) -> Request<GoTrue.SessionOrUser> {
      .post(path, body: body)
    }
  }
}

internal enum Paths {}
